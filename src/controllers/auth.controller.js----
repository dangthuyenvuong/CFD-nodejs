import jwt from 'jsonwebtoken'
import { ACCESS_KEY, BAD_REQUEST, STATUS_CODE_SERVER_ERROR } from '../config/index.js'
import User from '../models/user.model.js'
import md5 from 'md5'



const generateToken = (data) => {
    return jwt.sign(data, ACCESS_KEY, { expiresIn: '15m' })
}

const AuthController = {
    async login(req, res) {
        let { username, password } = req.body

        const user = await User.findOne({
            where: {
                email: username,
                password: md5(password)
            }
        })
        if (user) {
            const token = generateToken({
                id: user.id,
                email: user.email
            })

            return res.json({
                data: {
                    accessToken: token
                }
            })
        }

        return res.status(BAD_REQUEST)
            .json({
                status: BAD_REQUEST,
                error: 'Email or password not exists',
            })


    },
    async register(req, res) {
        const { email, password, fullName } = req.body

        if (!email || !password || !fullName) {
            return res.status(BAD_REQUEST)
                .json({
                    status: BAD_REQUEST,
                    error: 'Email, password and fullName are required',
                })
        }

        const check = await User.findOne({
            where: {
                email: email
            }
        })

        if (check) {
            return res.status(BAD_REQUEST).json({
                status: BAD_REQUEST,
                error: 'Email exists, please choose another email'
            })
        }

        const user = await User.create({
            email,
            password: md5(password),
            fullName
        }, { validate: true })

        if (user) {
            const token = generateToken({
                id: user.id,
                email: user.email
            })

            return res.json({
                data: {
                    accessToken: token
                }
            })
        }

        return res.status(STATUS_CODE_SERVER_ERROR)
            .json({
                status: STATUS_CODE_SERVER_ERROR,
                error: "Server error"
            })
    },
    refreshToken(req, res) {
        const { user } = req

        const token = generateToken({
            id: user.id,
            email: user.email
        })

        return res.json({
            data: {
                accessToken: token
            }
        })
    }
}

export default AuthController